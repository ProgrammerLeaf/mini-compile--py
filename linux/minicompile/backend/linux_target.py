class TargetType:
  TARGET_EXE = 0
  TARGET_SO = 1  # Linux共享库替代DLL
  TARGET_A = 2   # 静态库

def generate_asm(code_gen, target_type, filename):
  code = code_gen.get_code()
  strings = code_gen.get_strings()
  asm = []
    
  asm.append("; Generated by MiniCompiler (Python version)")
  asm.append(".intel_syntax noprefix")
  asm.append(".section .text")
  asm.append(".global main")  # Linux ELF入口点通常是main

    # 数据段
  asm.append(".section .data")
  for str_id, value in strings.items():
    asm.append(f"{str_id}: .asciz '{value}'")  # .asciz自动添加null终止符
  asm.append("")

  if target_type == TargetType.TARGET_SO:
    asm.append(".section .note.GNU-stack,\"\",@progbits")
    asm.append(".section .rodata")

  asm.append(".section .text")
  asm.append("main:")  # Linux下的主函数入口

  asm.append(code)
    
  # 添加退出系统调用
  asm.append("mov rax, 60")  # sys_exit
  asm.append("xor rdi, rdi")  # exit code 0
  asm.append("syscall")
    
  return asm, strings