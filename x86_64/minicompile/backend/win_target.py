# x86_64/minicompile/backend/win_target.py
class TargetType:
  TARGET_EXE = 0
  TARGET_DLL = 1
  TARGET_LIB = 2

def generate_asm(code_gen, target_type, filename):
  code = code_gen.get_code()
  strings = code_gen.get_strings()
  asm = []
    
  asm.append("; Generated by MiniCompiler (Python version)")
  asm.append(".x64")
  asm.append(".model flat, C")
  asm.append("includelib minicrt.lib\n")

  # 数据段
  asm.append(".data")
  for str_id, value in strings.items():
    asm.append(f"{str_id} db '{value}', 0")
  asm.append("")

  if target_type == TargetType.TARGET_DLL:
    asm.append(f"LIBRARY {filename}")
    asm.append("EXPORTS")
    asm.append("    DllMain @1\n")

  asm.append(".code\n")

  if target_type == TargetType.TARGET_EXE:
    asm.append("main PROC")
  elif target_type == TargetType.TARGET_DLL:
    asm.append("DllMain PROC hInstance:QWORD, reason:DWORD, unused:QWORD")

  asm.append(code)
  asm.append("")

  if target_type == TargetType.TARGET_EXE:
    asm.append("ret")
    asm.append("main ENDP")
  elif target_type == TargetType.TARGET_DLL:
    asm.append("mov eax, 1")
    asm.append("ret")
    asm.append("DllMain ENDP")

  entry = "main" if target_type == TargetType.TARGET_EXE else "DllMain"
  asm.append(f"END {entry}")
    
  return asm, strings